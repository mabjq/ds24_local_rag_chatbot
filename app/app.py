# Streamlit-webbapp som tillhandah친ller ett anv칛ndargr칛nssnitt f칬r att st칛lla fr친gor
# till RAG-pipelinen (via rag_pipeline.py) och visa svar samt k칛llor fr친n v친rd- och
# omsorgsn칛mndens protokoll. Anv칛nder konfiguration fr친n config.yaml.

import streamlit as st
import os
import sys
import yaml
from PIL import Image

# L칛gg till scripts/ i s칬kv칛gen f칬r att importera run_rag_query
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "scripts"))
from rag_pipeline import run_rag_query 

def load_config():
    """
    L칛ser YAML-konfiguration fr친n config/config.yaml f칬r RAG-pipeline-inst칛llningar.
    Returnerar en dictionary med konfigurationsdata.
    """
    config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "config", "config.yaml")
    with open(config_path, "r") as f:
        return yaml.safe_load(f)

def main():
    """
    Konfigurerar och k칬r Streamlit-webbgr칛nssnittet f칬r att interagera med RAG-pipelinen.
    Hanterar anv칛ndarfr친gor, visar svar och k칛llor, samt formaterar layouten.
    """
    st.set_page_config(page_title="AI s칬k i Protokoll (RAG-demo)", layout="wide")

    # Anpassa gr칛nssnittets stil med CSS
    st.markdown("""
        <style>
        .main {
            background-color: #ffffff;
            color: #003366;
        }
        h1, h2, h3, h4 {
            color: #003366;
        }
        .stButton>button {
            background-color: #FF6600;
            color: white;
            font-weight: bold;
            border-radius: 8px;
            padding: 0.5em 1em;
        }
        .stTextInput>div>div>input {
            border: 2px solid #003366;
        }
        .stExpanderHeader {
            background-color: #f0f0f0;
        }
        </style>
    """, unsafe_allow_html=True)

    # Visa S칬lvesborgs logotyp om den finns
    logo_path = os.path.join(os.path.dirname(__file__), "static", "solvesborg_logotyp.png")
    if os.path.exists(logo_path):
        logo = Image.open(logo_path)
        st.image(logo, width=150)

    # S칛tt sidans titel
    st.title("AI s칬k i Protokoll   (RAG-demo)")

    # Visa projektbeskrivning i gr칛nssnittet
    st.markdown("""
    Detta 칛r en **teknikdemonstration** som visar hur AI kan anv칛ndas f칬r att s칬ka i n칛mndsprotokoll med hj칛lp av RAG (Retrieval-Augmented Generation).  
    L칬sningen kan enkelt anpassas till andra typer av dokument och informationsm칛ngder.
    """)

    # Ladda konfiguration f칬r RAG-pipelinen
    config = load_config()
    
    # Skapa kolumner f칬r fr친ga och k칛llor
    col1, col2 = st.columns([3, 2])

    with col1:
        # Textf칛lt f칬r anv칛ndarens fr친ga
        query = st.text_input("游닌 Din fr친ga:", placeholder="Vad diskuterades den 27 februari 2025?")
        
        # K칬r RAG-fr친ga vid knapptryck
        if st.button("游닏 Skicka fr친ga") and query:
            with st.spinner("游댍 Genererar svar..."):
                try:
                    response, docs = run_rag_query(query, config)
                    st.subheader("游닋 Svar:")
                    st.write(response)
                    st.session_state["docs"] = docs   # Spara k칛llor i session_state
                except Exception as e:
                    st.error(f"Ett fel uppstod: {str(e)}")

    with col2:
        # Visa k칛llor f칬r genererat svar
        st.subheader("游닄 K칛llor:")
        if "docs" in st.session_state and st.session_state["docs"]:
            for i, doc in enumerate(st.session_state["docs"], 1):
                with st.expander(f"游늯 Dokument {i}: {doc.metadata['filename']}"):
                    st.write(f"**Chunk-index**: {doc.metadata['chunk_index']}")
                    st.write(f"**Inneh친ll**: {doc.page_content[:200]}...")
        else:
            st.write("Inga k칛llor att visa 칛nnu. St칛ll en fr친ga!")

if __name__ == "__main__":
    main()
